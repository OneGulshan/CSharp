C# Basics
----------

Delegate
---------

What is Delegate and what are the types of Delegate in C#?
Ans. Delegate is a Type(Data Type) which holds a method's reference in an Object.
There are two types of delegates in C#, singlecast delegates and multiplecast delegates.
Singlecast delegate: Singlecast delegate points to a single method at a time. The delegate is assigned to a single method at a time. They are derived from System.Delegate class.
Multicast Delegate: When a delegate is wrapped with more than one method, that is known as a multicast delegate.

OOPS
-----

What is OOPS
OOPS is a programming pattern that is built around objects or entities

what is the meaning of oriented in OOP in C#
In OOP oriented meaning is interested in a particular kind of thing or entity in C#

Classes And Objects
--------------------

What is the class and object in C#
Class and Object are the basic concepts of Object-Oriented Programming which revolve(घूमना) around the real-life entities. A class is a user-defined blueprint or prototype from which objects are created. Basically, a class combines the fields and methods(member function which defines actions) into a single unit.

Constructor
------------

What is the constructor in C#
A constructor in C# is a member of a class. It is a method in the class which gets executed when a class object is created. Usually we put the initialization code in the constructor. The name of the constructor is always is the same name as the class. A C# constructor can be public or private.

Constructor Overloading
------------------------

What is the constructor overloading in C#
When more than one constructor with the same name is defined in the same class, they are called overloaded, if the parameters are different for each constructor.

Static And Instance Members Of Class
-------------------------------------

What is the static and instance members of class in C#
The members of a class that can not be accessed without creating an instance for the class are called as instance members and the members of a class that can be accessed without creating an instance and directly by using class name are called as static members.

Static Constructor
-------------------

What is static constructor in C#
A static constructor is used to initialize any static data, or to perform a particular action that needs to be performed only once. It is called automatically before the first instance is created or any static members are referenced.

Copy Constructor
-----------------

A constructor that creates an object by copying variables from another object or that copies the data of one object into another object is termed as the Copy Constructor. It is a parameterized constructor that contains a parameter of the same class type.

Private Constructor
--------------------

A private constructor is a special instance constructor. It is generally used in classes that contain static members only. If a class has one or more private constructors and no public constructors, other classes (except nested classes) cannot create instances of this class. For example: C# Copy.

Static Class
-------------

A static class in C# is a class that cannot be instantiated. A static class can only contain static data members including static methods, static constructors, and static properties. In C#, a static class is a class that cannot be instantiated.

Destructor 
-----------

In C#, destructor (finalizer) is used to destroy objects of class when the scope of an object ends. It has the same name as the class and starts with a tilde ~ .

Inheritance
------------

Inheritance is a feature of object-oriented programming languages that allows you to define a base class that provides specific functionality (data and behavior) and to define derived classes that either inherit or override that functionality.

Type of Inheritance
--------------------

Single Level Inheritance. In Single inheritance, there is only one base class and one derived class. ...
Multilevel Inheritance. In this type of inheritance, there is only one base class, and multiple derived class are available. ...
Multiple Inheritance. In Multiple inheritance, there is only one base class and one derived class and other Interfaces. ...
Hierarchical Inheritance. In Hierarchical Inheritance, there is one base class inherited with different child classes.

Access Specifier
-----------------

Access Specifiers (Access Modifiers) are keywords in Object Oriented Programming, that specify accessibility of Types and Types Members. Remember the following points: By default classes are Internal. By default members of classes are Private. Access Specifier are Public, Private, Protected, Internal.

The internal access specifier in C# is a keyword that specifies that a type or type member can only be accessed within the same assembly.

Encapsulation 
--------------

Encapsulation, in the context of C#, refers to an object's ability to hide data and behavior that are not necessary to its user. Encapsulation enables a group of properties, methods and other members to be considered a single unit or object.

get and set property
---------------------

A get property accessor is used to return the property value, and a set property accessor is used to assign a new value.

static property
----------------

In C#, static means something which cannot be instantiated. You cannot create an object of a static class and cannot access static members using an object. C# classes, variables, methods, properties, operators, events, and constructors can be defined as static using the static modifier keyword.

Polymorphism
-------------

Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance. Like we specified in the previous chapter; Inheritance lets us inherit fields and methods from another class. Polymorphism uses those methods to perform different tasks. In Polymorphism their are two types of polymorphism Compile(Static) time polymorphism and Run(Dynamic) time polymorphism.

Operator overriding
---------------------

Operator overloading gives the ability to use the same operator to do various operations. It provides additional capabilities to C# operators when they are applied to user-defined data types.

Method hiding
--------------

C# also provides a concept to hide the methods of the base class from derived class, this concept is known as Method Hiding. It is also known as Method Shadowing. In method hiding, you can hide the implementation of the methods of a base class from the derived class using the new keyword.

Method hiding in inheritance
-----------------------------

Answer: Method hiding occurs in inheritance relationship when the base class and the derived class both have a method with the same name. When we create an object of the derived class, it will hide the base class method and call its own method. This is called method hiding or name hiding in C# inheritance.

Method overloading
------------------

Method Overriding in C# is similar to the virtual function in C++. Method Overriding is a technique that allows the invoking of functions from another class (base class) in the derived class. Creating a method in the derived class with the same signature as a method in the base class is called as method overriding.

Difference between method hiding and method overriding
-------------------------------------------------------

n method overriding, when base class reference variable pointing to the object of the derived class, then it will call the overridden method in the derived class. In the method hiding, when base class reference variable pointing to the object of the derived class, then it will call the hidden method in the base class.

sealed class
-------------

In C#, when we don't want a class to be inherited by another class, we can declare the class as a sealed class. A sealed class cannot have a derived class. We use the sealed keyword to create a sealed class.

sealed method
--------------

Prevent overriding a method of a class. This is a method that is declared with the keyword sealed and is always used with combination of override keyword. Derived classes will not be able to override this method as it is sealed for overriding.

Indexers
---------

Indexers allow instances of a class or struct to be indexed just like arrays. The indexed value can be set or retrieved without explicitly specifying a type or instance member. Indexers resemble properties except that their accessors take parameters.

Delegate 
---------

A delegate is a type that represents references to methods with a particular parameter list and return type. When you instantiate a delegate, you can associate its instance with any method with a compatible signature and return type. You can invoke (or call) the method through the delegate instance.

Single Cast Delegate
---------------------

Single Cast Delegate: This is a kind of delegate that can refer to single method at one time. SingleCast Delegates refer to a single method with matching signature. SingleCast Delegates derive from the System.Delegate class.

Multiple Delegate
------------------

Multiple methods can be assigned to the delegate using "+" or "+=" operator and removed using "-" or "-=" operator. It is called multicast delegate. If a multicast delegate returns a value then it returns the value from the last assigned target method. Delegate is used to declare an event and anonymous methods in C#.

Multicast Delegate
-------------------

What is Multicast Delegate in C#? A Multicast Delegate in C# is a delegate that holds the references of more than one function. When we invoke the multicast delegate, then all the functions which are referenced by the delegate are going to be invoked.

Anonymous method
-----------------

An anonymous method is a method which doesn't contain any name which is introduced in C# 2.0. It is useful when the user wants to create an inline method and also wants to pass parameter in the anonymous method like other methods.

Lambda expression
------------------

Lambda expressions in C# are used like anonymous functions, with the difference that in Lambda expressions you don't need to specify the type of the value that you input thus making it more flexible to use. The '=>' is the lambda operator which is used in all lambda expressions.

Abstraction 
------------

Data abstraction is the process of hiding certain details and showing only essential information to the user. Abstraction can be achieved with either abstract classes or interfaces (which you will learn more about in the next chapter).

Abstract Classes and Abstract Methods
--------------------------------------

Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class). Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the derived class (inherited from).

Abstract property
------------------

An abstract property declaration does not provide an implementation of the property accessors -- it declares that the class supports properties, but leaves the accessor implementation to derived classes. The following example demonstrates how to implement the abstract properties inherited from a base class.

Interface
----------

Interface in C# is a blueprint of a class. It is like abstract class because all the methods which are declared inside the interface are abstract methods. It cannot have method body and cannot be instantiated. It is used to achieve multiple inheritance which can't be achieved by class.

Interface inheritence
----------------------

C# allows the user to inherit one interface into another interface. When a class implements the inherited interface then it must provide the implementation of all the members that are defined within the interface inheritance chain.

Explicit interface implementation
----------------------------------

An Interface is a collection of loosely bound items that have a common functionality or attributes. Interfaces contain method signatures, properties, events etc. Interfaces are used so that one class or struct can implement multiple behaviors.

Similarities between abstract classes and Interface
----------------------------------------------------

By using both we can go for dynamic polymorphism. Both can contain static and final variable. Both inherited from common domain of itself using extends keyword. Both provide static method implementation.

Difference between abstract classes and Interface
--------------------------------------------------

In C#, an Interface provides only those public services declared in the interface, whereas an abstract class provides the public services defined in an abstract class and those members that are inherited from the abstract class's base class.

Multiple inheritance
---------------------

In Multiple inheritance, one class can have more than one superclass and inherit features from all its parent classes. As shown in the below diagram, class C inherits the features of class A and B. But C# does not support multiple class inheritance.

Generics
---------

Generic is a class which allows the user to define classes and methods with the placeholder. The basic idea behind using Generic is to allow type (Integer, String, … etc and user-defined types) to be a parameter to methods, classes, and interfaces.

Generics Class
---------------

Generic is a class which allows the user to define classes and methods with the placeholder. Generics were added to version 2.0 of the C# language. The basic idea behind using Generic is to allow type (Integer, String, … etc and user-defined types) to be a parameter to methods, classes, and interfaces.